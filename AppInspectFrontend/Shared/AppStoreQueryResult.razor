@inject HttpClient httpClient
@using System.Linq;
@using System.Text.Json
@using AppInspectDataModels
@inject FrontendSettings settings

@if (AppStoreQueryTask != null)
{
    @if (!AppStoreQueryTask.Completed.HasValue)
    {
        <div class="d-flex justify-content-center">
            <div class="spinner-border text-warning" style="width: 3rem; height: 3rem;" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else
    {
        <table class="table table-bordered table-secondary">
            <tbody>
                <tr>
                    <th class="col-sm-3">Task Id</th>
                    <td class="col-sm-9">@AppStoreQueryTask.Id</td>
                </tr>
                <tr>
                    <th>Status</th>
                    <td>
                        @if (!AppStoreQueryTask.Started.HasValue)
                        {
                            <span>Pending</span>

                            <span class="spinner-border text-secondary spinner-border-sm"></span>
                        }
                        else if ((!AppStoreQueryTask.Completed.HasValue) && (AppStoreQueryTask.Started.HasValue))
                        {
                            <span>Started to run at @AppStoreQueryTask.Started.Value.ToLongTimeString() on @AppStoreQueryTask.Started.Value.ToShortDateString()</span>

                            <span class="spinner-border text-secondary spinner-border-sm"></span>
                        }
                        else if (AppStoreQueryTask.Completed.HasValue && AppStoreQueryTask.Started.HasValue)
                        {
                            @if (AppStoreQueryTask.Error != null)
                            {
                                <span>Error</span>
                            }
                            else
                            {
                                <span>Completed at @AppStoreQueryTask.Started.Value.ToLongTimeString() on @AppStoreQueryTask.Started.Value.ToShortDateString() </span>
                            }
                        }
                    </td>
                </tr>
                @if (AppStoreQueryTask.Error != null)
                {
                    <tr>
                        <th>Technical details</th>
                        <td>
                            @AppStoreQueryTask.Error
                        </td>
                    </tr>
                }

                @if ((ShowArguments) && (prettifiedArguments != null))
                {
                    <tr>
                        <th>Query parameters</th>
                        <td>
                            <textarea class="form-control form-control-sm" rows="3" readonly>@prettifiedArguments</textarea>
                        </td>
                    </tr>
                }

                @if (_appStoreListResults != null)
                {
                    @if (_appStoreListResults.Count() > 0)
                    {
                        <tr>
                            <th>Result App Ids</th>
                            <td>
                                <textarea class="form-control form-control-sm" rows="5" readonly>@string.Join(Environment.NewLine, _appStoreListResults.Select(r => r.AppId!))</textarea>
                            </td>
                        </tr>

                        <tr>
                            <th>Download</th>
                            <td>
                                <a href="@(new Uri(settings.AppInspectAPIUrl!, $"store/{TaskId}/download/csv"))" class="link-primary me-2" target="_blank"><span class="oi oi-spreadsheet"></span> CSV</a>&nbsp;
                                <a href="@(new Uri(settings.AppInspectAPIUrl!, $"store/{TaskId}/download/json"))" class="link-primary" target="_blank"><span class="oi oi-code"></span> JSON</a>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    }
}

@if (appStoreListResultsPagingWindow != null)
{
    @if (appStoreListResultsPagingWindow.Count() > 0)
    {
        <table class="table table-light table-striped mt-3">
            <thead>
                <tr>
                    <th class="col-sm-2">App Id</th>
                    <th class="col-sm-3">Title</th>
                    <th class="col-sm-2">Developer</th>
                    <th class="col-sm-3">Summary</th>
                    <th class="col-sm-2">&nbsp;</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var result in appStoreListResultsPagingWindow)
                {
                    <tr>
                        <td>
                            @if (result.AppId != null)
                            {
                                @if (result.AppId.Length <= 48)
                                {
                                    @result.AppId
                                }
                                else
                                {
                                    <input type="text" class="form-control" value=@result.AppId readonly />
                                }
                            }
                        </td>
                        <td>@result.Title</td>
                        <td>@result.Developer</td>
                        <td>
                            <textarea readonly class="col-11 form-control form-control-sm" rows="1" value=@result.Summary>
                                                                </textarea>
                        </td>
                        <td>
                            <a href="app/@(Common.EncodeBase64(result.AppId!))" class="link-primary" target="_blank"><span class="oi oi-eye"></span> Open</a>
                            &nbsp; &nbsp;
                            <a href="@result.Url" class="link-primary" target="_blank"><span class="oi oi-external-link"></span> Play store</a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <Paginator PageCount=@appStoreListResultsPageCount @bind-PageIndex=appStoreListResultsPageIndex @bind-PaginatorStart=@appStoreListResultsPaginatorStart PageSize=@appStoreListResultsPageSize></Paginator>
    }
    else
    {
        <p>Sorry, no results.</p>
    }
}
else if (appStoreSingleResult != null)
{
    <ul>
        <li>AppId: <a href="app/@(Common.EncodeBase64(appStoreSingleResult.AppId!))" class="link-primary" target="_blank">@appStoreSingleResult.AppId</a></li>
        <li class="mt-2">Title: @appStoreSingleResult.Title</li>
        <li class="mt-2">Version name: @appStoreSingleResult.VersionName</li>
        <li class="mt-2">Updated: @appStoreSingleResult.Updated</li>
        <li class="mt-2">Description: @appStoreSingleResult.Description</li>
        <li class="mt-2">Url: <a href="@appStoreSingleResult.Url" class="link-primary" target="_blank">@appStoreSingleResult.Url</a></li>
    </ul>
}


@code {
    private readonly string[] suppportedActions = new string[] { "query_googleplay" };

    private string? _taskId;

    [Parameter]
    public string? TaskId
    {
        get => _taskId;
        set
        {
            string? oldTaskId = _taskId;
            _taskId = value;
            if (_taskId != oldTaskId)
            {
                Task.Run(async () => await Refresh());
            }
        }
    }

    private AppStoreQueryTaskArguments? _queryTaskArguments;

    private AppStoreQueryTaskArguments? queryTaskArguments
    {
        get => _queryTaskArguments;
        set
        {
            _queryTaskArguments = value;
            prettifiedArguments = Common.GetPrettifiedAppStoreQueryTaskArguments(_queryTaskArguments);
        }
    }

    private List<AppStoreQueryRecord>? _appStoreListResults { get; set; }

    private List<AppStoreQueryRecord>? appStoreListResultsPagingWindow
    {
        get { return (_appStoreListResults == null) ? null : _appStoreListResults.Skip(appStoreListResultsPageIndex * appStoreListResultsPageSize).Take(appStoreListResultsPageSize).ToList(); }
        set
        {
            _appStoreListResults = value;
            if (value != null)
            {
                int recordCount = value.Count();
                int remainder = recordCount % appStoreListResultsPageSize;
                appStoreListResultsPageCount = ((recordCount - remainder) / appStoreListResultsPageSize) + ((remainder>0)?1:0);
                appStoreListResultsPageIndex = 0;
                appStoreListResultsPaginatorStart = 0;
            }
        }
    }

    private int appStoreListResultsPageSize { get; set; } = 10;
    private int appStoreListResultsPageCount { get; set; } = 0;
    private int appStoreListResultsPageIndex { get; set; } = 0;
    private int appStoreListResultsPaginatorStart { get; set; } = 0;

    private AppStoreQueryRecord? appStoreSingleResult { get; set; }

    private AppInspectTask? _appStoreQueryTask;

    private AppInspectTask? AppStoreQueryTask
    {
        get => _appStoreQueryTask;
        set
        {
            if (value != null)
            {
                if (suppportedActions.Contains(value.Action))
                {
                    _appStoreQueryTask = value;

                    if (!string.IsNullOrEmpty(value.Arguments))
                    {
                        queryTaskArguments = JsonSerializer.Deserialize<AppStoreQueryTaskArguments>(value.Arguments);
                    }

                    if (queryTaskArguments == null)
                        return;

                    if (!string.IsNullOrEmpty(value.Results))
                    {
                        switch (queryTaskArguments.QueryMethod)
                        {
                            case "list":
                            case "search":
                            case "developer":
                            case "similar":
                                {
                                    appStoreListResultsPagingWindow = JsonSerializer.Deserialize<List<AppStoreQueryRecord>>(value.Results);
                                }
                                break;
                            case "app":
                                {
                                    appStoreSingleResult = JsonSerializer.Deserialize<AppStoreQueryRecord>(value.Results);
                                }
                                break;
                            default:
                                break;
                        }
                    }
                }
            }
        }
    }

    [Parameter]
    public bool ShowArguments { get; set; }

    private string? prettifiedArguments { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (TaskId != null)
            await Refresh();
    }

    public async Task Refresh()
    {
        if (TaskId != null)
        {
            AppStoreQueryTask = await httpClient.GetFromJsonAsync<AppInspectTask>($"task/{TaskId}");
            StateHasChanged();
        }
    }
}
